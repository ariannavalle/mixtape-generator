{"version":3,"sources":["components/LandingPage/LandingPage.js","components/Search/Search.js","components/Track/Track.js","components/Tracklist/Tracklist.js","components/Mixtape/Mixtape.js","components/SearchTrackListContainer/SearchTrackListContainer.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","componentDidMount","str","split","el","document","getElementById","animate","running","setTimeout","length","innerHTML","shift","clearTimeout","className","id","to","Component","search","state","selectedSongs","saveselectedSongs","songPicked","setState","renderselectedSongs","map","result","key","src","album","images","url","alt","name","renderSearchResults","props","results","addToSeedList","Object","keys","onClick","Track","currentlyPlaying","playAudio","currentPlayBtn","previousElementSibling","pause","play","renderIcons","audio","title","artist","addTrackToMixtape","type","style","color","this","albumCover","substring","Tracklist","mixtapeTracks","recommendations","rec","artists","preview_url","Mixtape","tracks","track","i","SearchTrackListContainer","query","trackIDs","a","headers","Accept","auth","username","process","password","data","grant_type","axios","post","qs","stringify","tokenResponse","onChange","event","target","value","getResults","get","Authorization","access_token","then","songs","items","catch","error","console","log","getrecommendations","recs","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bccc55e9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\nimport './LandingPage.css'\n\nexport default class LandingPage extends Component {\n\n    componentDidMount = () => {\n        const string = \"The ultimate mixtape generator\";\n        const str = string.split(\"\");\n        const el = document.getElementById('str');\n        (function animate() {\n            const running = setTimeout(animate, 90);\n            str.length > 0 ? el.innerHTML += str.shift() : clearTimeout(running);\n        })();\n\n    }\n    render() {\n        return (\n            <div className=\"home-body\">\n                <div id=\"str\"></div>\n                <h2>Discover new music and create curated playlists.<br />\n                    <Link to={'/generator'}>\n                        <div className=\"box-2\">\n                            <div className=\"btn btn\">\n                                <div>START</div>\n                            </div>\n                        </div>\n                    </Link>\n                </h2>\n            </div>\n        )\n    }\n}\n\n\n","import React, { Component } from 'react'\nimport './Search.css'\n\nexport default class search extends Component {\n\n    state = {\n        selectedSongs: []\n    }\n\n    saveselectedSongs = (songPicked) => {\n        this.setState({\n            selectedSongs: [...this.state.selectedSongs, songPicked]\n        })\n    }\n\n    renderselectedSongs = () => {\n        return (\n            <div className=\"chosen-items-container\">\n                {this.state.selectedSongs.map((result) => {\n                    return (\n                        <div key={result.id} className=\"chosen-items\">\n\n                            <img className=\"album-image\" src={result.album.images[0].url} alt={result.name} />\n\n                            <div>{result.name}</div>\n\n\n                        </div>\n                    );\n                })}\n            </div>\n        )\n    }\n\n    renderSearchResults = () => {\n        const { results, addToSeedList } = this.props;\n\n        if (Object.keys(results).length && results.length) {\n            return (\n                <div className=\"results-container\">\n                    {results.map((result) => {\n                        return (\n                            <div key={result.id} onClick={() => { addToSeedList(result.id); this.saveselectedSongs(result) }} className=\"result-items\">\n                                <div className=\"columns\">\n                                    <div className=\"column is-1\">\n                                        <img className=\"image\" src={result.album.images[0].url} alt={result.name} />\n                                    </div>\n                                    <div className=\"column\">\n                                        {result.name}\n                                    </div>\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            );\n        }\n    };\n\n\n    render() {\n        return (\n            // render search box\n            <>\n                <div className=\"container\">\n                    <h3>Search for songs to find your new favorite tunes.</h3>\n                    <label className=\"search-label\" htmlFor=\"search-input\">\n                        <input\n                            type=\"text\"\n                            id=\"search-input\"\n                            onChange={this.props.onChange}\n                        />\n                        <i className=\"fa fa-search search-icon\" />\n                    </label>\n\n                    {/* render search result list */}\n                    {this.renderSearchResults()}\n                </div>\n\n                {/* render user's selections */}\n                {this.renderselectedSongs()}\n            </>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { MdPlayCircleFilled, MdPauseCircleOutline, MdErrorOutline, MdAddCircle } from \"react-icons/md\";\nimport './Track.css'\n\nexport default class Track extends Component {\n\n    state = {\n        currentlyPlaying: false,\n    }\n\n    playAudio = () => {\n        const currentPlayBtn = document.getElementById(this.props.id)\n\n        this.state.currentlyPlaying ? currentPlayBtn.previousElementSibling.pause() : currentPlayBtn.previousElementSibling.play();\n\n        this.setState({\n            currentlyPlaying: !this.state.currentlyPlaying\n        })\n    }\n\n    renderIcons = () => {\n        const { audio, id, title, artist, addTrackToMixtape } = this.props;\n\n        return (<div>\n            <audio id=\"my-audio\" >\n                <source src={audio} type=\"audio/mpeg\" />\n                Your browser does not support the audio element.\n            </audio>\n\n            {audio ?\n                this.state.currentlyPlaying ?\n                    <MdPauseCircleOutline className=\"md-icon\" id={id} onClick={this.playAudio} />\n                    : <MdPlayCircleFilled className=\"md-icon\" id={id} onClick={this.playAudio} />\n                :\n                <div className=\"tooltip\">\n                    <MdErrorOutline className=\"md-icon\" style={{ color: \"#ccc\" }} />\n                    <div className=\"top\">Preview unavailable</div>\n                </div>\n            }\n\n            <MdAddCircle className=\"md-icon add\" onClick={() => addTrackToMixtape({ id, title, artist })} />\n\n        </div>)\n    }\n\n    render() {\n        const { albumCover, title, artist } = this.props;\n        return (\n\n            <div className=\"track\">\n\n                <div className=\"album-art\">\n                    <img src={albumCover} className=\"cover\" alt=\"album cover\"/>\n                </div>\n\n                <div className=\"track-layout\">\n                    <div className=\"track-info\">\n                        <div className=\"track-title\">{title.length > 30 ? title.substring(0, 30) + \"...\" : title}</div>\n                        <div className=\"track-artist\">by {artist}</div>\n                    </div>\n\n                    {this.renderIcons()}\n\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Track from '../Track/Track'\nimport './Tracklist.css'\n\nexport default class Tracklist extends Component {\n\n    state = {\n        mixtapeTracks: this.props.mixtapeTracks\n    }\n\n\n    render() {\n        const { recommendations } = this.props\n        return (\n            <div id=\"tracklist-container\"  >\n                {recommendations.length > 0 && (<><h4>Tracklist</h4> <span>These are some recommended songs based on your search. Preview them and add your favorites to your mixtape.</span></> )}\n                {recommendations.map((rec) => {\n                    return <div key={rec.id}>\n                        <Track albumCover={rec.album.images[0].url} title={rec.name} artist={rec.artists[0].name} audio={rec.preview_url} id={rec.id} addTrackToMixtape={this.props.addTrackToMixtape } />\n                    </div>\n                })\n                }\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Mixtape.css'\n\nexport default class Mixtape extends Component {\n\n    render() {\n\n        return (\n            <div>\n                <h4>Mixtape</h4>\n                <span>A list containing your favorite tracks</span>\n                <div id=\"mixtape\"> \n                    <div className=\"mixtape-heading\">Side A</div>\n                    {this.props.tracks.map((track, i) => {\n                        return (\n                            <div key={i} className=\"mixtape-container\">\n                                <div className=\"mixtape-track\">\n                                    <div>{track.title}</div> \n                                    <div>{track.artist}</div> \n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport qs from 'qs';\nimport Search from '../Search/Search'\nimport Tracklist from '../Tracklist/Tracklist'\nimport './SearchTrackListContainer.css'\nimport Mixtape from '../Mixtape/Mixtape';\n\nexport default class SearchTrackListContainer extends Component {\n    state = {\n        query: '',\n        results: {},\n        trackIDs: [],\n        recommendations: [],\n        mixtapeTracks: []\n    }\n\n    componentDidMount = async () => {\n\n        const headers = {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            auth: {\n                username: process.env.REACT_APP_USERNAME,\n                password: process.env.REACT_APP_PASSWORD,\n            },\n        };\n        const data = {\n            grant_type: 'client_credentials',\n        };\n        this.tokenResponse = await axios.post('https://accounts.spotify.com/api/token', qs.stringify(data), headers)\n    }\n\n\n    onChange = (event) => {\n        const query = event.target.value;\n\n        if (!query) {\n            this.setState({ query, results: {}, });\n        } else {\n            this.setState({ query }, () => {\n                this.getResults(query);\n            });\n        }\n    };\n\n    getResults = (query) => {\n        axios.get(`https://api.spotify.com/v1/search?query=${this.state.query}&type=track&limit=5`, {\n            headers: {\n                Authorization: `Bearer ${this.tokenResponse.data.access_token}`\n            },\n        }).then((songs) => {\n            this.setState({\n                results: songs.data.tracks.items,\n            });\n        })\n            .catch((error) => {\n                console.log('Failed to get search results.')\n\n            });\n    };\n\n    getrecommendations = () => {\n        axios.get(`https://api.spotify.com/v1/recommendations?seed_tracks=${this.state.trackIDs}`, {\n            headers: {\n                Authorization: `Bearer ${this.tokenResponse.data.access_token}`\n            }\n        }).then((recs) => {\n            this.setState({\n                recommendations: recs.data.tracks,\n            })\n        }).catch((error) => {\n            console.log('Failed to get recommendations.')\n\n        });\n    }\n\n    addToSeedList = async (id) => {\n        await this.setState({\n            trackIDs: [...this.state.trackIDs, id],\n            // this will close the search dropdown once the user makes a choice\n            results: {},\n        })\n        this.getrecommendations()\n    }\n\n    addTrackToMixtape = async (track) => {\n        await this.setState({\n            mixtapeTracks: [...this.state.mixtapeTracks, track],\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"search-tracklist-body\">\n                <div><Link to={'/'} className=\"home-link\"><i style={{ color: \"white\" }} className='fa fa-home'></i></Link><br /></div>\n                <div className=\"align-center\">\n                    <div className=\"search-tracklist-container\">\n\n                        <Search onChange={this.onChange} results={this.state.results} addToSeedList={this.addToSeedList} />\n                        <div className=\"tracklist-columns\">\n                            <Tracklist recommendations={this.state.recommendations} addTrackToMixtape={this.addTrackToMixtape} />\n                            {this.state.recommendations.length >= 1 && <Mixtape tracks={this.state.mixtapeTracks} />}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport 'bulma/css/bulma.css';\nimport { Switch, Route } from 'react-router-dom';\nimport LandingPage from './components/LandingPage/LandingPage'\nimport SearchTrackListContainer from './components/SearchTrackListContainer/SearchTrackListContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path='/' component={LandingPage} />\n        <Route exact path='/generator' component={SearchTrackListContainer} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}